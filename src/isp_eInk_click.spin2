'' =================================================================================================
''
''   File....... isp_eInk_click.spin2
''   Purpose.... Interface to the Mikroe eInk Click module w/display
''   Authors.... Stephen M Moraco
''               -- Copyright(c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jun 2022
''   Updated.... 05 Jun 2022
''
'' =================================================================================================

CON { Public Interface Constants }

    '  ID where the P2 Eval Motor Board is plugged in(Enum)
    ' (Names of supported PinGroups)
    #0[16], PINS_P0_P15, PINS_P16_P31, PINS_P32_P47
    ' return value when user makes bad choice
    INVALID_PIN_BASE = -1

    FONT_Tahoma_6 = eInkFonts.FONT_Tahoma_6
    FONT_Tahoma_7 = eInkFonts.FONT_Tahoma_7
    FONT_Tahoma_8 = eInkFonts.FONT_Tahoma_8
    FONT_Tahoma_10 = eInkFonts.FONT_Tahoma_10
    FONT_Tahoma_14 = eInkFonts.FONT_Tahoma_14
    FONT_Tahoma_16 = eInkFonts.FONT_Tahoma_16
    FONT_Tahoma_18 = eInkFonts.FONT_Tahoma_18
    FONT_Exo_2_Condensed10x16 = eInkFonts.FONT_Exo_2_Condensed10x16
    FONT_Exo_2_Condensed15x23 = eInkFonts.FONT_Exo_2_Condensed15x23
    FONT_Exo_2_Condensed21x32 = eInkFonts.FONT_Exo_2_Condensed21x32
    FONT_Roboto_Mono11x23 = eInkFonts.FONT_Roboto_Mono11x23

    FONT_UNKNOWN = eInkFonts.FONT_UNKNOWN


OBJ { Objects / constants included by this object }

    eInkFonts   : "isp_eInk_fonts"              ' eInt ported font set
    spi         : "jm_ez_spi"                   '   smart pin mode 0 spi coms


CON { Test PINs for LA measurement }

CON { Click Module offsets }
 {

    P2 Eval Click Adapter IO Assignments
    * - used by eInk Click module w/display(3.3v only)

               ┌─────────────────────────────┐
    Base + 06  │() AN                 D/C(*) │  Base + 05
               │                             │
    Base + 07  │(*) RST               BSY(*) │  Base + 04
               │                             │
    Base + 08  │(*) CS              <-- RX() │  Base + 03(marked TX on Click modules)
               │                             │
    Base + 09  │(*) SCK  <--        --> TX() │  Base + 02(marked RX on Click modules)
               │                             │
    Base + 10  │(*) MISO -->       --> SCL() │  Base + 01
               │                             │
    Base + 11  │(*) MOSI <--       <-> SDA() │  Base + 00
               │                             │
               │(*) 3v3                5v0() │
               │                             │
               │(*) GND               GND(*) │
               └─────────────────────────────/
}

    ' specs for Click EINK board
   CLICK_OFST_MOSI = 11     ' Mikroe pin 6  - SPI Data - Out
   CLICK_OFST_MISO = 10     ' N/C  Mikroe pin 5
   CLICK_OFST_SCK = 9       ' Mikroe pin 4  - SPI Clock - Out
   CLICK_OFST_CS = 8        ' Mikroe pin 3  - SPI Chip Select - Out
   CLICK_OFST_RST = 7       ' Mikroe pin 2  - Reset - Out
   'CLICK_OFST_AN = 6       ' N/C  Mikroe pin 1

   CLICK_OFST_DC = 5       ' Mikroe pin 16 - D/C - Out Data Config(normally CLICK_OFST_PWM)
   CLICK_OFST_BSY = 4       ' Mikroe pin 15 - Busy - In(normally CLICK_OFST_INT)
   'CLICK_OFST_RX = 3       ' N/C  Mikroe pin 14
   'CLICK_OFST_TX = 2       ' N/C  Mikroe pin 13
   'CLICK_OFST_SCL = 1      ' N/C  Mikroe pin 12
   'CLICK_OFST_SDA = 0      ' N/C  Mikroe pin 11

CON { eInk Constants }

' error_code Error Code
    EINK_OK                     =   $00
    EINK_INIT_ERROR             =   $FF

' display_resolution Display resolution
    DISPLAY_WIDTH               =   128
    DISPLAY_HEIGHT              =   250
    DISPLAY_RESOLUTION          =   4000

' display_communication Display Communication
    COMMUNICATION_SPI           =   0
    COMMUNICATION_I2C           =   1

' fillScreen_color Fill screen color
    ' $FF=white, $00=black, $55=gray 1, $AA=gray 2
    SCREEN_COLOR_WHITE          =   $FF
    SCREEN_COLOR_BLACK          =   $00
    SCREEN_COLOR_LIGHT_GREY     =   $AA
    SCREEN_COLOR_DARK_GREY      =   $55

    FO_HORIZONTAL               =   $00
    FO_VERTICAL                 =   $01
    FO_VERTICAL_COLUMN          =   $02

' display_commands Display Commands
    CMD_DRIVER_OUTPUT_CTRL          =   $01
    CMD_BOOSTER_SOFT_START_CTRL     =   $0C
    CMD_GATE_SCAN_START_POSN        =   $0F
    CMD_DEEP_SLEEP_MODE             =   $10
    CMD_DATA_ENTRY_MODE_SETTING     =   $11
    CMD_SW_RESET                    =   $12
    CMD_TEMPERATURE_SENSOR_CTRL     =   $1A
    CMD_MASTER_ACTIVATION           =   $20
    CMD_DISPLAY_UPDATE_CTRL_1       =   $21
    CMD_DISPLAY_UPDATE_CTRL_2       =   $22
    CMD_WRITE_RAM                   =   $24
    CMD_WRITE_VCOM_REGISTER         =   $2C
    CMD_WRITE_LUT_REGISTER          =   $32
    CMD_SET_DUMMY_LINE_PERIOD       =   $3A
    CMD_SET_GATE_TIME               =   $3B
    CMD_BORDER_WAVEFORM_CTRL        =   $3C
    CMD_SET_RAM_X_ADDR_SRTEND_POS   =   $44
    CMD_SET_RAM_Y_ADDR_SRTEND_POS   =   $45
    CMD_SET_RAM_X_ADDR_CTR          =   $4E
    CMD_SET_RAM_Y_ADDR_CTR          =   $4F
    CMD_TERMINATE_FRAME_READ_WRITE  =   $FF

    ' EINK Tx Buffer Size
    EINK_BUFFER_SIZE_IN_BYTES = 1024

    ' SPI Communication Freq w/EINK Board
    EINK_SPI_CLK_MHZ = 20_000

DAT { EINK Device Config }


PUB null()

'' This is not a top-level object

DAT { object class data }

    pinbase long    0


PUB start(eClickBasePin) : ok | legalBase
'' Specify the eval board connect location for the EINK click and start SPI
' REF https://www.mikroe.com/eink-click
   ' ensure we only use legal values
    legalBase := eClickBasePin
    case eClickBasePin
        PINS_P0_P15 :
        PINS_P16_P31 :
        PINS_P32_P47 :
        OTHER :
            legalBase := INVALID_PIN_BASE

    ' if legal base-pin then start cog
    ok := false
    if legalBase <> INVALID_PIN_BASE
        pinbase := legalBase                    ' record base pin number
        ' configure inputs
        pinfloat(pinbase + CLICK_OFST_BSY)
        'pinfloat(pinbase + CLICK_OFST_MOSI)
        ' assert reset while starting up
        pinlow(pinbase + CLICK_OFST_RST)
        spi_master_deselect_device()
        ok := spi.start(pinbase + CLICK_OFST_MISO, pinbase + CLICK_OFST_MOSI, pinbase + CLICK_OFST_SCK, EINK_SPI_CLK_MHZ)                     ' spi to EINK @ 3MHz(can run at 20MHz)
        ' reset device
        resetDevice()


PUB stop()
'' Stop the EINK Click SPI Object
    spi.stop()

PUB enableDevice()
'' Enable the EINK Device(pull it out of reset)
    pinhigh(pinbase + CLICK_OFST_RST)                       ' de-assert reset

PUB resetDevice()
'' Reset the EINK device
    pinhigh(pinbase + CLICK_OFST_CS)    ' CS idle=1
    pinlow(pinbase + CLICK_OFST_SCK)    ' SCLK idle=0

    pinhigh(pinbase + CLICK_OFST_RST)   ' toggle reset
    waitms(1)
    pinlow(pinbase + CLICK_OFST_RST)
    waitms(2)
    pinhigh(pinbase + CLICK_OFST_RST)
    waitms(3)

PRI spi_master_deselect_device()
    ' Deselect the click SPI device
    pinhigh(pinbase + CLICK_OFST_CS)                                ' deselect EINK Click

PRI spi_master_select_device()
    ' Select the click SPI device
    pinlow(pinbase + CLICK_OFST_CS)                                 ' select EINK Click

PRI spi_master_fill(nValue, nLen) | bytIdx
    ' clock-out {nLen} bytes of {nValue}
    debug("eInk: spi_master_fill() len=(", udec_(nLen), ") ", udec_(nValue))
    repeat bytIdx from 0 to nLen - 1
        spi.shiftout(spi.MSBFIRST, nValue, 8)

PRI spi_master_write(pBffr, nBffrLen) | bytIdx
    ' clock-out N bytes of data
    debug("eInk: spi_master_write() len=(", udec_(nBffrLen), ") ", UHEX_BYTE_ARRAY(pBffr, nBffrLen))
    repeat bytIdx from 0 to nBffrLen - 1
        spi.shiftout(spi.MSBFIRST, BYTE[pBffr][bytIdx], 8)


PRI reset()
    pinlow(pinbase + CLICK_OFST_RST)
    waitms(200)
    pinhigh(pinbase + CLICK_OFST_RST)
    waitms(200)

PRI waitForDeviceIdle() | state
    ' wait until BUSY is de-asserted
    repeat
        state := pinread(pinbase + CLICK_OFST_BSY)
        if state
            waitms(100)
    until state == 0


PUB enterSleepMode()
'' tell device to sleep
    writeCmd(CMD_DEEP_SLEEP_MODE)
    waitForDeviceIdle()


PUB setDeviceLut(pLut, nBytes) | nIdx
'' write the device LUT data
    writeCmd(CMD_WRITE_LUT_REGISTER)
    repeat nIdx from 0 to nBytes - 1
        writeData(BYTE [pLut][nIdx])


PUB startConfig()
'' configure our display
    writeCmd(CMD_DRIVER_OUTPUT_CTRL)
    writeData(((DISPLAY_HEIGHT - 1) & $FF))
    writeData((((DISPLAY_HEIGHT - 1) >> 8) & $FF))

    writeCmd(CMD_SET_DUMMY_LINE_PERIOD)
    writeData($06)
    writeCmd(CMD_SET_GATE_TIME)
    writeData($0B)

    writeCmd(CMD_DATA_ENTRY_MODE_SETTING)
    writeData($01)

    writeCmd(CMD_SET_RAM_X_ADDR_SRTEND_POS)
    writeData($00)
    writeData($0F)
    writeCmd(CMD_SET_RAM_Y_ADDR_SRTEND_POS)
    writeData($F9)
    writeData($00)

    writeCmd(CMD_WRITE_VCOM_REGISTER)
    writeData($4B)

    writeCmd(CMD_BORDER_WAVEFORM_CTRL)
    writeData($33)

    displayDelay()


PRI displayDelay()
' wait for settle time
    waitms(2)

PRI setMemoryPointer(x, y)
' set pointer to RAM
    writeCmd(CMD_SET_RAM_X_ADDR_CTR)
    writeData(((x >> 3) & $FF))
    writeCmd(CMD_SET_RAM_Y_ADDR_CTR)
    writeData((y & $FF))
    writeData(((y >> 8) & $FF))


PRI setMemoryArea(xStart, yStart, xEnd, yEnd)
' set region of RAM
    writeCmd(CMD_SET_RAM_X_ADDR_SRTEND_POS)
    writeData((xStart >> 3) & $FF)
    writeData((xEnd >> 3) & $FF)
    writeCmd(CMD_SET_RAM_Y_ADDR_SRTEND_POS)
    writeData(yStart & $FF)
    writeData((yStart >> 8) & $FF)
    writeData(yEnd & $FF)
    writeData((yEnd >> 8) & $FF)


PRI updateDisplay()
'' Tell display to show updates
    waitms(100)
    writeCmd(CMD_DISPLAY_UPDATE_CTRL_2)
    writeData($C7)
    writeCmd(CMD_MASTER_ACTIVATION)
    writeCmd(CMD_TERMINATE_FRAME_READ_WRITE)
    waitForDeviceIdle()

PUB fillScreen(color) | cntX, cntY
'' Fill display with {color}
    setMemoryArea(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT - 1)
    ' for each display line...
    repeat cntY from 0 to DISPLAY_HEIGHT - 1
        setMemoryPointer(0, cntY)
        ' write contents for this line
        writeCmd(CMD_WRITE_RAM)
        repeat cntX from 0 to 16 - 1
            writeData(color)

    displayDelay()
    updateDisplay()


PUB displayImage(pImageBffr) | cntX, cntY, imgIdx
'' Write image bitmap to display
    setMemoryArea(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT - 1)
    ' for each display line...
    repeat cntY from 0 to DISPLAY_HEIGHT - 1
        setMemoryPointer(0, cntY)
        ' write contents for this line
        writeCmd(CMD_WRITE_RAM)
        repeat cntX from 0 to 16 - 1
            imgIdx := cntX +(cntY * 16)
            writeData(BYTE [pImageBffr][imgIdx])
    ' flush content to display
    updateDisplay()


PUB showTextAtRC(row, col, pText) | cntX, cntY, pos, cnt, nChar
'' Place zstr on display at device row, column
    if((col >= DISPLAY_WIDTH) ||(row >= DISPLAY_HEIGHT))
        return

    nChar := strsize(pText)

    deviceX := col
    deviceY := row

    repeat cnt from 0 to nChar - 1
        char_wr(BYTE [pText][ cnt ])

    setMemoryArea(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT - 1)
    ' for each display line...
    repeat cntY from 0 to DISPLAY_HEIGHT - 1
        setMemoryPointer(0, cntY)
        ' write contents for this line
        writeCmd(CMD_WRITE_RAM)
        repeat cntX from 0 to 16 - 1
            pos := cntX + (cntY * 16)
            writeData(BYTE [@deviceFrame][ pos ])

    ' flush content to display
    displayDelay()
    updateDisplay()

DAT
    fontAddr        LONG    0
    first_char      LONG    0
    last_char       LONG    0
    fontHeight      LONG    0
    fontColor       LONG    0
    fontOrientation LONG    0
    deviceX         LONG    0
    deviceY         LONG    0
    deviceFrame     BYTE    0[DISPLAY_RESOLUTION]

PUB setFont(orientation, color, eFont) | pFont
'' set font configuration

    pFont := eInkFonts.fontAddress(eFont)
    if pFont == FONT_UNKNOWN
        return

    fontAddr        := pFont
    first_char      := BYTE [pFont][ 2 ] + (BYTE [pFont][ 3 ] << 8)
    last_char       := BYTE [pFont][ 4 ] + (BYTE [pFont][ 5 ] << 8)
    fontHeight      := BYTE [pFont][ 6 ]
    fontColor       := color
    fontOrientation := orientation
    debug("ft: fontAddr ", uhex_Long_(first_char))
    debug("ft: first_char ", udec_(first_char))
    debug("ft: last_char ", udec_(last_char))
    debug("ft: fontHeight ", udec_(fontHeight))
    debug("ft: fontColor ", uhex_(fontColor))

PRI frame_px(x, y, font_col) | offset, byteIdx
' place font pixel in device frame for later display
    byteIdx := (y * (DISPLAY_WIDTH / 8 ) ) + (x / 4 )
    offset := (3 - (x // 4 ) ) * 2

    BYTE [@deviceFrame][byteIdx] &= !($03 << offset )
    BYTE [@deviceFrame][byteIdx] |=((font_col & $03 ) << offset )


PRI char_wr(ch_idx) | tmp, chrWidth, x_cnt, y_cnt, x, y, temp, mask, offset, pChrTable, pChrBitmap
' place font character in device frame for later display
    chrWidth := 0
    x := 0
    y := 0
    temp := 0
    mask := 0

    if(ch_idx < first_char )
        return

    if(ch_idx > last_char )
        return

    offset := 0
    tmp :=(ch_idx - first_char ) << 2
    pChrTable := fontAddr +(8 + tmp )
    chrWidth := BYTE [pChrTable][0]

    offset :=  BYTE [pChrTable][ 1 ] +(BYTE [pChrTable][ 2 ] << 8) +(BYTE [pChrTable][ 3 ] << 16)

    pChrBitmap := fontAddr + offset

    if((fontOrientation == FO_HORIZONTAL) || (fontOrientation == FO_VERTICAL_COLUMN))
        y := deviceY
        repeat y_cnt from 0 to fontHeight - 1
            x := deviceX
            mask := 0
            repeat x_cnt from 0 to chrWidth - 1
                if(!mask )
                    temp := BYTE [pChrBitmap]
                    pChrBitmap++
                    mask := $01

                if(temp & mask )
                    frame_px(x, y, fontColor)
                    waitms(1)   ' PROXY for Delay_80us()

                x++
                mask <<= 1

            y++

        if fontOrientation == FO_HORIZONTAL
            deviceX := x + 1
        else
            deviceY := y

    else
        y := deviceX
        repeat y_cnt from 0 to fontHeight - 1
            x := deviceY
            mask := 0
            repeat x_cnt from 0 to chrWidth - 1
                if mask == 0
                    temp := BYTE [pChrBitmap]
                    pChrBitmap++
                    mask := $01

                if temp & mask
                    frame_px(x, y, fontColor)
                    waitms(1)   ' PROXY for Delay_80us()

                x--
                mask <<= 1

            y++

        deviceY := x - 1


DAT
    lut_data    BYTE    $82,$00,$00,$00,$AA,$00,$00,$00,$AA
                BYTE    $AA,$00,$00,$AA,$AA,$AA,$00,$55,$AA
                BYTE    $AA,$00,$55,$55,$55,$55,$AA,$AA,$AA
                BYTE    $AA,$55,$55,$55,$55,$AA,$AA,$AA,$AA
                BYTE    $15,$15,$15,$15,$05,$05,$05,$05,$01
                BYTE    $01,$01,$01,$00,$00,$00,$00,$00,$00
                BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00
                BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00
                BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$41
                BYTE    $45,$F1,$FF,$5F,$55,$01,$00,$00,$00

PUB baseTest() | i
    debug("* baseTest() ENTRY")
    '  device is already reset

    writeCmd(CMD_DEEP_SLEEP_MODE)  ' do not enter deep sleep mode
    writeData($00)

    writeCmd(CMD_DATA_ENTRY_MODE_SETTING) ' data entry mode setting $01: Y decrement,X increment
    writeData($01)

    writeCmd(CMD_SET_RAM_X_ADDR_SRTEND_POS) ' set RAM X-address start/end position
    writeData($00) ' RAM X -address start at 00H
    writeData($11) ' RAM X-address end at 11H->(17D),that is(17+1*4=72)start/end position
    writeData($AB) ' RAM Y-address start at ABH->(171D)
    writeData($00) ' RAM Y-address end at 00H

    writeCmd(CMD_SET_RAM_X_ADDR_CTR) ' set RAM x address count to 0
    writeData($00)

    writeCmd(CMD_SET_RAM_Y_ADDR_CTR) ' set RAM Y address count to 172->0
    writeData($AB)

    writeCmd($F0) ' booster feedback selection,$1F->internal feedback is used
    writeData($1F) ' $83

    writeCmd(CMD_DISPLAY_UPDATE_CTRL_1) ' bypass the RAM data into the display, enable pass
    writeData($03)

    writeCmd(CMD_WRITE_VCOM_REGISTER) ' write VCOM register
    writeData($A0)

    writeCmd(CMD_BORDER_WAVEFORM_CTRL) ' board waveform, board voltage
    writeData($63)

    writeCmd(CMD_DISPLAY_UPDATE_CTRL_2) ' enable sequence, CLK->CP->
    writeData($C4)

    writeCmd(CMD_WRITE_LUT_REGISTER) ' write LUT register
    repeat i from 0 to 90 - 1
        writeData(byte [@lut_data][i])

    debug("* baseTest() EXIT")

PRI fill_display(fileByte) | i
' $FF=white, $00=black, $55=gray 1, $AA=gray 2
    writeCmd(CMD_WRITE_RAM) ' data write into RAM after this command
    repeat i from 0 to 3096 - 1 ' 3096 = 172x72 / 8x2,(2-Bit per dot)
        writeData(fileByte)
    writeCmd(CMD_MASTER_ACTIVATION)

    ' Booster disable
    writeCmd(CMD_DISPLAY_UPDATE_CTRL_2)  ' display updata sequence option, in page 33
    writeData($02)
    writeCmd(CMD_MASTER_ACTIVATION)


PRI writeCmd(data)
' write command byte(DC low = command)
    pinlow(pinbase + CLICK_OFST_DC)
    SPI_out(data)


PRI writeData(data)
' write data byte(DC high = data)
    pinhigh(pinbase + CLICK_OFST_DC)
    SPI_out(data)


PRI SPI_out(dataByte) | count
' write byte to SPI
    ' select device
    pinlow(pinbase + CLICK_OFST_CS)
    ' clock out bits MSB first
    spi.shiftout(spi.MSBFIRST, dataByte, 8)
    ' deselect device
    pinhigh(pinbase + CLICK_OFST_CS)


CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright(c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files(the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
